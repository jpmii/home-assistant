  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'
      - 'time_date'
      - 'time_utc'
      - 'beat'
  - platform: darksky
    api_key: !secret darksky_api
    monitored_conditions:
      - summary
      - minutely_summary
      - hourly_summary
      - daily_summary
      #- icon
      - nearest_storm_distance
      #- nearest_storm_bearing
      - precip_type
      - precip_intensity
      - precip_probability
      - temperature
      - apparent_temperature
      - dew_point
      - wind_speed
      - wind_bearing
      - cloud_cover
      - humidity
      - pressure
      - visibility
      - ozone
  - platform: template
    sensors:
      sunlight_pct:
        value_template: >-
          {%- set elevation = state_attr('sun.sun','elevation') | float %}
          {%- set cloud_coverage = states('sensor.openweathermap_cloud_coverage') | float %}
          {%- set cloud_factor = (1 - (0.75 * ( cloud_coverage / 100) ** 3 )) %}
          {%- set min_elevation = -6 %}
          {%- set max_elevation = 90 %}
          {%- set adjusted_elevation = elevation - min_elevation %}
          {%- set adjusted_elevation = [adjusted_elevation,0] | max %}
          {%- set adjusted_elevation = [adjusted_elevation,max_elevation - min_elevation] | min %}
          {%- set adjusted_elevation = adjusted_elevation / (max_elevation - min_elevation) %}
          {%- set adjusted_elevation = adjusted_elevation %}
          {%- set adjusted_elevation = adjusted_elevation * 100 %}
          {%- set brightness = adjusted_elevation * cloud_factor %}
          {{ brightness | round }}
        unit_of_measurement: '%'
        device_class: 'illuminance'
      current_temp:
        value_template: "{% if is_state('weather.kpvd_hourly', 'unavailable') %}{{ states.weather.home.attributes.temperature | float }}{% elif is_state('weather.kpvd_hourly', '') %}{{ states.weather.kpvd_hourly.attributes.temperature | float }}{% else %}{{ states.weather.home.attributes.temperature | float }}{% endif %}"
        friendly_name: 'Current Temperature'
        unit_of_measurement: "°F"
      dryer_shock_battery:
        value_template: "{{ states.zwave.vision_security_zs5101_shock_and_vibration_sensor.attributes.battery_level }}"
        friendly_name: "Dryer Vibration Sensor Battery"
        unit_of_measurement: '%'
        device_class: battery
      basement_thermostat_battery:
        value_template: "{{ states.zwave.radio_thermostat_company_of_america_ct101_thermostat_iris.attributes.battery_level }}"
        friendly_name: "Basement Thermostat Battery"
        unit_of_measurement: '%'
        device_class: battery
      dryer_status:
        friendly_name: "Dryer Status"
        icon_template: mdi:tumble-dryer
        value_template: >-
          {% if is_state('input_boolean.dryer_on', 'on') %} On {% else %} Off {% endif %}
      washing_machine_status:
        friendly_name: "Washing Machine Status"
        icon_template: mdi:washing-machine
        value_template: >-
          {% if states.sensor.washing_machine_power.state|float > 0 %} On {% else %} Off {% endif %}
      washing_machine_power:
        value_template: "{{ states.sensor.sonoff_10012a9d3b_power }}"
        friendly_name: "Washing Machine Power"
        device_class: power
      washing_machine_current:
        value_template: "{{ states.sensor.sonoff_10012a9d3b_current }}"
        friendly_name: "Washing Machine Current"
        device_class: current
      washing_machine_voltage:
        value_template: "{{ states.sensor.sonoff_10012a9d3b_voltage }}"
        friendly_name: "Washing Machine Voltage"
        device_class: voltage
      basement_smoke_detector:
        friendly_name: 'Basement Smoke Detector'
        value_template: >-
          {% if is_state("sensor.first_alert_brk_brands_inc_zcombo_smoke_and_carbon_monoxide_detector_alarm_level", "255") and is_state("sensor.first_alert_brk_brands_inc_zcombo_smoke_and_carbon_monoxide_detector_alarm_type", "1")%}
            Smoke
          {% elif is_state("sensor.first_alert_brk_brands_inc_zcombo_smoke_and_carbon_monoxide_detector_alarm_level", "255") and is_state("sensor.first_alert_brk_brands_inc_zcombo_smoke_and_carbon_monoxide_detector_alarm_type", "2")%}
            CO
          {% else %}
            Idle
          {% endif %}
        icon_template: >-
          {% if is_state("sensor.first_alert_brk_brands_inc_zcombo_smoke_and_carbon_monoxide_detector_alarm_level", "255") and is_state("sensor.first_alert_brk_brands_inc_zcombo_smoke_and_carbon_monoxide_detector_alarm_type", "1")%}
            mdi:fire
          {% elif is_state("sensor.first_alert_brk_brands_inc_zcombo_smoke_and_carbon_monoxide_detector_alarm_level", "255") and is_state("sensor.first_alert_brk_brands_inc_zcombo_smoke_and_carbon_monoxide_detector_alarm_type", "2")%}
            mdi:cloud-outline
          {% else %}
            mdi:smoke-detector
          {% endif %}
      battery_basement_slider_water_leak:
        friendly_name: 'Basement Slider Water Leak Battery Level'
        value_template: "{{ states.binary_sensor.basement_slider_wl_water_leak.attributes.battery }}"
        unit_of_measurement: '%'
        device_class: battery
      temperature_weather_home:
        unit_of_measurement: '°F'
        friendly_name: "Weather.Home Temperature (met.no)"
        value_template: "{{ state_attr('weather.home', 'temperature') }}"
      temperature_weather_kpvd_hourly:
        unit_of_measurement: '°F'
        friendly_name: "KPVD Temperature (National Weather Service/NOAA)"
        value_template: "{{ state_attr('weather.kpvd_hourly', 'temperature') }}"
      bad_weather_sensor:
        value_template: "{% if states.sensor.dark_sky_precip_probability.state|float > 80 and states.sensor.dark_sky_nearest_storm_distance.state < '6' %}Yes{% else %}No{% endif %}"
        friendly_name: "Bad Weather"
        icon_template: >-
          {% if is_state("sensor.dark_sky_precip", "rain")%}
            mdi:weather-rainy
          {% elif is_state("sensor.dark_sky_precip", "snow")%}
            mdi:weather-snowy
          {% else %}
            mdi:weather-sunny
          {% endif %}
      low_batteries:
        friendly_name: Low Battery Devices
        unit_of_measurement: Entities
        icon_template: "{{ 'mdi:checkbox-marked-circle-outline' if states('sensor.low_batteries')|int == 0 else 'mdi:alert-circle-outline' }}"
        value_template: >
            {%- set ns = namespace(counter=0) -%} 
            {%- set threshold = 30 -%}
            {%- for item in expand('group.battery_levels') -%}
            {%- if item.state | int <= threshold -%}
            {%- set ns.counter = ns.counter + 1 -%}
            {%- endif -%}
            {%- endfor -%}
            {{ ns.counter }}
        attribute_templates:
          matched_devices: >
            {%- set threshold = 30 -%}
            {%- for item in expand('group.battery_levels') -%}
            {%- if item.state | int <= threshold -%}
             - {{ item.name }} - {{ item.state }}|
            {%- endif -%}
            {%- endfor -%}
      my_name:
        value_template: !secret me_name
      cooktop_on:
        value_template: >
          {% for attr in states.sensor.oven.attributes %}{%- if  "cooktop" in attr and states.sensor.oven.attributes[attr] != 'off'  -%}{{attr.split('_state')[0]|replace('_',' ')}}, {%- endif %}{%- endfor -%}
      ambient_light:
        friendly_name: 'Ambient Light'
        value_template: '{{ "%.2f"|format((states.sun.sun.attributes.elevation/24)*((states.sun.sun.attributes.elevation/24)+(1-(states.sensor.dark_sky_cloud_coverage.state|int/100)))) }}'
      date_md:
        value_template: "{{ now().month }}-{{ now().day }}"
      off_day:
        value_template: "{{'NO SCHOOL' in states.calendar.murphy_calendar.attributes.message or states.binary_sensor.workday_sensor.state == 'off'}}"
        #    value_template: "{{ ((as_timestamp(states.calendar.hoxie.attributes.start_time) - as_timestamp(now())) < 43200) and ((as_timestamp(states.calendar.hoxie.attributes.start_time) - as_timestamp(now())) > 0) }}"
      school_day:
        value_template: "{{ ((as_timestamp(states.calendar.school_days.attributes.start_time) - as_timestamp(now())) < 43200) and ((as_timestamp(states.calendar.school_days.attributes.start_time) - as_timestamp(now())) > 0) }}"
        #states.calendar.school_days.attributes.start_time
      school_day_off_tomorrow:
        value_template: "{{(as_timestamp(now() + timedelta(days=1)) | timestamp_custom('%Y-%m-%d') == as_timestamp(states.calendar.school_days.attributes.start_time) | timestamp_custom('%Y-%m-%d')) or states.binary_sensor.workday_tomorrow.state == 'off'}}"
      distance_learning_tomorrow:
        value_template: >
          {% if (state_attr("calendar.distance_learning_days","start_time")) %}
              {% set e = strptime(
                   states.calendar.distance_learning_days.attributes.start_time,
                   '%Y-%m-%d %H:%M:%S') %}
              {{ (e) and (e.strftime('%j')|int - now().strftime('%j')|int == 1 )}}
          {% else %}
            False
          {% endif %}
      sleep_mode:
        value_template: "{% set t = strptime(states('sensor.time'), '%H:%M') %}{%- if t.hour >= 23 or t.hour <=6 -%}all sleep{%- elif t.hour >= 20 or t.hour <=6 -%}kids asleep{%- else -%}awake{%- endif -%}"
        friendly_name: "Anyone Sleeping?"
      holidaylighttime:
        value_template: "{{ as_timestamp(state_attr('sun.sun', 'next_setting') | as_datetime - timedelta(minutes=30)) | timestamp_custom(' %I:%M %p') }}"
        friendly_name: "Outside Light(s) will turn on at"